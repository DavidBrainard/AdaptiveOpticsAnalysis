% AlignAOSLOImagesImProcToolbox.
%
% Some playing around with AO SLO frames provided by Jessica Morgan.
% Try Matlab's image processing toolbox methods.
%
% 7/10/12  dhb  Wrote it.

%% Clear and close
clear; close all;

%% Load in the frames
movieName = 'movie_4214';
aosloImagesObj = VideoReader([movieName '.avi']);
vidFrames = double(read(aosloImagesObj))/255;
nFrames = size(vidFrames,4);

%% Parameters
fullImageRows = size(vidFrames,1);
fullImageCols = size(vidFrames,2);
alignImageRows = round(3*fullImageRows/4);
alignImageCols = round(3*fullImageCols/4);
alignImageRowOffset = round(fullImageCols/8);
alignImageColOffset = round(fullImageCols/8);
preAlign = 0;
alignToAvg = 0;
optStr = 'grad';
metStr = 'msq';
transStr = 'rigid';
pyrLevels = 3;
maxIter = 200;
lineRows = 231:232;
lineCols = 273:283;

%% Generate reference image
figure; clf;

%% Make space
alignedImages = zeros(fullImageRows,fullImageCols,nFrames);
prealignedImages = zeros(fullImageRows,fullImageCols,nFrames);
unalignedImages = zeros(fullImageRows,fullImageCols,nFrames);

%% Configure the aligner objects
switch (optStr)
    case 'evo'
        optimizer = registration.optimizer.OnePlusOneEvolutionary;
        optimizer.MaximumIterations = maxIter;
        optimizer.GrowthFactor = 1.01;
        optimizer.Epsilon = optimizer.Epsilon/4;
        optimizer.InitialRadius = optimizer.InitialRadius/4;

    case 'grad'
        optimizer = registration.optimizer.RegularStepGradientDescent;
        optimizer.MaximumIterations = maxIter;
        optimizer.MinimumStepLength = optimizer.MinimumStepLength/4;
        optimizer.MaximumStepLength = optimizer.MaximumStepLength/4;
        optimizer.RelaxationFactor = 0.8;
end
switch (metStr)
    case 'msq'
        metric = registration.metric.MeanSquares;
    case 'mutual'
        metric = registration.metric.MattesMutualInformation;
end

%% Prealign images by aligning each to the aligned version of
% the one before.
if (preAlign)
    unalignedImages(:,:,1) = squeeze(vidFrames(:,:,1,1));
    prealignedImages(:,:,1) = squeeze(vidFrames(:,:,1,1));
    for j = 2:nFrames
        refImage = prealignedImages(:,:,j-1);
        fprintf('Prealigning frame %d of %d\n',j,nFrames);
        testImage = squeeze(vidFrames(:,:,1,j));
        unalignedImages(:,:,j) = testImage;
        alignedImage = imregister(testImage,refImage,transStr,optimizer,metric,'PyramidLevels',pyrLevels,'DisplayOptimization',false);
        prealignedImages(:,:,j) = alignedImage;
        
        % Show what is happening
        subplot(1,3,1);
        imshow(squeeze(prealignedImages(:,:,1)));
        subplot(1,3,2);
        imshow(squeeze(unalignedImages(:,:,j)));
        subplot(1,3,3);
        imshow(squeeze(prealignedImages(:,:,j)));
        drawnow;
    end
else
    for j = 1:nFrames
        unalignedImages(:,:,j) = squeeze(vidFrames(:,:,1,j));
        prealignedImages(:,:,j) = squeeze(vidFrames(:,:,1,j));
    end
end
unalignedAvgImage = mean(unalignedImages,3);

%% Align to the middle of the prealigned images.
% THIS MIGHT NEED A LITTLE DEBUGGING
refImage = prealignedImages(:,:,round(nFrames/2));
for j = 1:nFrames
    fprintf('Aligning frame %d of %d\n',j,nFrames);
    testImage = prealignedImages(:,:,j);
    alignedImage = imregister(testImage,refImage,transStr,optimizer,metric,'PyramidLevels',pyrLevels,'DisplayOptimization',false);
    alignedImages(:,:,j) = alignedImage;
   
    % Show what is happening
    subplot(1,3,1);
    imshow(squeeze(alignedImages(:,:,1)));
    subplot(1,3,2);
    imshow(squeeze(unalignedImages(:,:,j)));
    subplot(1,3,3);
    imshow(squeeze(alignedImages(:,:,j)));
    drawnow;
end

%% Average both the aligned and unligned versions
alignedAvgImage = mean(alignedImages,3);

%% Align to the average image obtained in the previous step
% MIGHT WANT TO TRIM THE IMAGES AROUND THE EDGES AT THIS
% STEP, SO AS TO AVOID DELETERIOUS EFFECTS OF EDGE ARTIFACTS.
if (alignToAvg)
    refImage = alignedAvgImage;
    for j = 1:nFrames
        fprintf('Aligning to average, frame %d of %d\n',j,nFrames);
        testImage = alignedImages(:,:,j);
        alignedImage = imregister(testImage,refImage,transStr,optimizer,metric,'PyramidLevels',pyrLevels,'DisplayOptimization',false);
        alignedImages(:,:,j) = alignedImage;
        
        % Show what is happening
        subplot(1,3,1);
        imshow(squeeze(alignedImages(:,:,1)));
        subplot(1,3,2);
        imshow(squeeze(unalignedImages(:,:,j)));
        subplot(1,3,3);
        imshow(squeeze(alignedImages(:,:,j)));
        drawnow;
    end
end
alignedAvgImage = mean(alignedImages,3);

alignedAvgImage = alignedAvgImage/max(alignedAvgImage(:));
unalignedAvgImage = unalignedAvgImage/max(unalignedAvgImage(:));
figure; clf;
subplot(1,2,1);
imshow(unalignedAvgImage);
title('Average Unaligned');
subplot(1,2,2);
imshow(alignedAvgImage);
title('Average Aligned');
savefig(sprintf('AveragedImagesImProcToolbox_%s_%s_%s_%d_%d_%d.pdf',optStr,metStr,transStr,pyrLevels,preAlign,alignToAvg),gcf,'pdf');

% Write a movie of the aligned frames
unalignedImages(lineRows,lineCols,:) = 0;
alignedImages(lineRows,lineCols,:) = 0;
framesPerSecond = 15;
outFilename = sprintf([movieName '_alignedImProcToolbox_%s_%s_%s_%d_%d_%d.avi'],optStr,metStr,transStr,pyrLevels,preAlign,alignToAvg);
%writerObj = VideoWriter(outFilename,'Uncompressed AVI');
writerObj = VideoWriter(outFilename,'Motion JPEG AVI');
writerObj.FrameRate = framesPerSecond;
open(writerObj);
for j = 1:nFrames
    writeVideo(writerObj,squeeze([unalignedImages(:,:,j) alignedImages(:,:,j)]));
end
close(writerObj);


