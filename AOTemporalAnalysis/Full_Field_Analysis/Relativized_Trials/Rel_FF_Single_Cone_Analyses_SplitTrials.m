% function [fitCharacteristics]=Rel_FF_Single_Cone_Analyses(stimRootDir, controlRootDir)
% [fitCharacteristics]=Rel_FF_Single_Cone_Analyses(stimRootDir, controlRootDir)
%
%   Calculates pooled variance across a set of pre-analyzed 
%   signals from a single cone's stimulus and control trials, performs 
%   the subtraction between its standard deviations, and performs a
%   piecewise fit of the subtraction.
%
%   This script is designed to work with FULL FIELD datasets- that is, each
%   dataset (mat file) contains *only* control or stimulus data.
%
%   Normally, the user doesn't need to select a stimulus or control root
%   directory (that will be found automatically by
%   "FF_Aggregate_Multi_Trial_Run.m"), but if the software is run by
%   itself it will prompt the user for the folders containing the
%   pre-analyzed mat files generated by Rel_FF_Temporal_Reflectivity_Analysis.m.
%
% Inputs:
%       stimRootDir: The folder path of the pre-analyzed (.mat) stimulus
%       trials. Each mat file must contain valid stimulus signals.
%
%       controlRootDir: The folder path of the pre-analyzed (.mat) control
%       trials. Each mat file must contain valid control signals.
%
%
% Outputs:
%       fitCharacteristics: Information extracted from the mat files and
%       the fitted subtracted signal.
%
% Created by Robert F Cooper 2017-10-31
%

clear;
close all;

% load('lowest_responders.mat');

CUTOFF = 26;
NUMTRIALS=20;

if ~exist('stimRootDir','var')
    close all force;
    stimRootDir = uigetdir(pwd, 'Select the directory containing the stimulus profiles');
    controlRootDir = uigetdir(pwd, 'Select the directory containing the control profiles');
end

profileSDataNames = read_folder_contents(stimRootDir,'mat');
profileCDataNames = read_folder_contents(controlRootDir,'mat');


% For structure:
% /stuff/id/date/wavelength/time/intensity/location/data/Profile_Data

[remain kid] = getparent(stimRootDir); % data
[remain stim_loc] = getparent(remain); % location 
[remain stim_intensity] = getparent(remain); % intensity 
[remain stim_time] = getparent(remain); % time
[remain stimwave] = getparent(remain); % wavelength
% [remain sessiondate] = getparent(remain); % date
[~, id] = getparent(remain); % id


%% Code for determining variance across all signals at given timepoint

THEwaitbar = waitbar(0,'Loading stimulus profiles...');

max_index=0;

load(fullfile(stimRootDir, profileSDataNames{1}));
stim_coords = ref_coords;

stim_cell_reflectance = cell(length(profileSDataNames),1);
stim_time_indexes = cell(length(profileSDataNames),1);
stim_cell_prestim_mean = cell(length(profileSDataNames),1);

for j=1:length(profileSDataNames)

    waitbar(j/length(profileSDataNames),THEwaitbar,'Loading stimulus profiles...');
    
    ref_coords=[];
    profileSDataNames{j}
    load(fullfile(stimRootDir,profileSDataNames{j}));
    
    stim_cell_reflectance{j} = norm_cell_reflectance;
    stim_time_indexes{j} = cell_times;
    stim_cell_prestim_mean{j} = cell_prestim_mean;
    
    thesecoords = union(stim_coords, ref_coords,'rows');
    
    % These all must be the same length! (Same coordinate set)
    if size(ref_coords,1) ~= size(thesecoords,1)
        error('Coordinate lists different between mat files in this directory. Unable to perform analysis.')
    end
    
    for k=1:length(cell_times)
        max_index = max([max_index max(cell_times{k})]);
    end
    
end

%%
control_cell_reflectance = cell(length(profileCDataNames),1);
control_time_indexes = cell(length(profileCDataNames),1);
control_cell_prestim_mean = cell(length(profileCDataNames),1);

load(fullfile(controlRootDir, profileCDataNames{1}));
control_coords = ref_coords;

for j=1:length(profileCDataNames)

    waitbar(j/length(profileCDataNames),THEwaitbar,'Loading control profiles...');
    
    ref_coords=[];
    profileCDataNames{j}
    load(fullfile(controlRootDir,profileCDataNames{j}));
        
    control_cell_reflectance{j} = norm_cell_reflectance;
    control_time_indexes{j} = cell_times;
    control_cell_prestim_mean{j} = cell_prestim_mean;

    thesecoords = union(control_coords, ref_coords,'rows');
    
    % The length of the cell reflectance lists *must* be the same, because the
    % coordinate lists *must* be the same in each mat file.
    if size(ref_coords,1) ~= size(thesecoords,1)
        error('Coordinate lists different between mat files in this directory. Unable to perform analysis.')
    end
    
    for k=1:length(cell_times)
        max_index = max([max_index max(cell_times{k})]);
    end
    
end

%% The coordinate lists must the same length,
% otherwise it's not likely they're from the same set.

if size(stim_coords,1) ~= size(control_coords,1)
    error('Coordinate lists different between control and stimulus directories. Unable to perform analysis.')
end

allcoords = stim_coords;


%% Aggregation of all trials

percentparula = parula(101);

numstimcoords = size(stim_coords,1);

stim_cell_var_first = nan(numstimcoords, max_index);
stim_cell_var_second = nan(numstimcoords, max_index);
stim_cell_median_first = nan(numstimcoords, max_index);
stim_cell_median_second = nan(numstimcoords, max_index);

stim_trial_count = zeros(numstimcoords,1);
stim_posnegratio = nan(numstimcoords,max_index);
stim_prestim_means=[];

i=1;
first = 1:NUMTRIALS/2;
second = NUMTRIALS/2+1:NUMTRIALS;

        
for i=1:numstimcoords
    waitbar(i/size(stim_coords,1),THEwaitbar,'Processing stimulus signals...');

    numtrials = 0;
    all_times_ref = nan(length(profileSDataNames), max_index);
    for j=1:length(profileSDataNames)
        
        if ~isempty(stim_cell_reflectance{j}{i}) && ...
           sum(stim_time_indexes{j}{i} >= 67 & stim_time_indexes{j}{i} <=99) >= CUTOFF

            stim_prestim_means = [stim_prestim_means; stim_cell_prestim_mean{j}(i)];

            numtrials = numtrials+1;
            all_times_ref(j, stim_time_indexes{j}{i} ) = stim_cell_reflectance{j}{i};
        end
    end 
    stim_trial_count(i) = numtrials;
    
    % Split the trials in two
    nonan_ref = all_times_ref(~all(isnan(all_times_ref),2), :);    
    if size(nonan_ref,1) >= NUMTRIALS

        nonan_ref_first = nonan_ref(first,:);
        nonan_ref_second = nonan_ref(second,:);
        
        for j=1:max_index
            nonan_ref = nonan_ref_first(~isnan(nonan_ref_first(:,j)), j);
            refcount = sum(~isnan(nonan_ref_first(:,j)));
            stim_cell_median_first(i,j) = median(nonan_ref);
            
            if ~isnan(nonan_ref)                
                stim_cell_var_first(i,j) = ( sum((nonan_ref-mean(nonan_ref)).^2)./ (refcount-1) );
            end
        end
        
        
        for j=1:max_index            
            nonan_ref = nonan_ref_second(~isnan(nonan_ref_second(:,j)), j);
            refcount = sum(~isnan(nonan_ref_second(:,j)));
            stim_cell_median_second(i,j) = median(nonan_ref);
            
            if ~isnan(nonan_ref)                
                stim_cell_var_second(i,j) = ( sum((nonan_ref-mean(nonan_ref)).^2)./ (refcount-1) );
            end
        end
%         figure(1); plot(nonan_ref_first','g');
%         hold on; plot(nonan_ref_second','b'); hold off;
%         
%         figure(2); plot(sqrt(stim_cell_var_first(i,:)),'g');
%         hold on; figure(2); plot(sqrt(stim_cell_var_second(i,:)),'b'); hold off;
    end

end


%%
numcontrolcoords = size(control_coords,1);

control_cell_var_first = nan(size(control_coords,1), max_index);
control_cell_var_second = nan(size(control_coords,1), max_index);
control_cell_median_first = nan(size(control_coords,1), max_index);
control_cell_median_second = nan(size(control_coords,1), max_index);

control_trial_count = zeros(size(control_coords,1),1);
control_posnegratio = nan(size(control_coords,1),max_index);
cont_prestim_means=[];


for i=1:numcontrolcoords
    waitbar(i/size(control_coords,1),THEwaitbar,'Processing control signals...');

    numtrials = 0;
    all_times_ref = nan(length(profileCDataNames), max_index);
    for j=1:length(profileCDataNames)
                        
        if ~isempty(control_cell_reflectance{j}{i}) && ...
           sum(control_time_indexes{j}{i} >= 67 & control_time_indexes{j}{i} <=99) >=  CUTOFF
       
            cont_prestim_means = [cont_prestim_means; control_cell_prestim_mean{j}(i)];
            numtrials = numtrials+1;
            all_times_ref(j, control_time_indexes{j}{i} ) = control_cell_reflectance{j}{i};
        end
    end
    control_trial_count(i) = numtrials;
  
    % Split the trials in two
    nonan_ref = all_times_ref(~all(isnan(all_times_ref),2), :);    
    if size(nonan_ref,1) >= NUMTRIALS
            
        nonan_ref_first = nonan_ref(first,:);
        nonan_ref_second = nonan_ref(second,:);
        
        for j=1:max_index
            nonan_ref = nonan_ref_first(~isnan(nonan_ref_first(:,j)), j);
            refcount = sum(~isnan(nonan_ref_first(:,j)));
            control_cell_median_first(i,j) = median(nonan_ref);
            
            if ~isnan(nonan_ref)                
                control_cell_var_first(i,j) = ( sum((nonan_ref-mean(nonan_ref)).^2)./ (refcount-1) );
            end
        end
        
        for j=1:max_index            
            nonan_ref = nonan_ref_second(~isnan(nonan_ref_second(:,j)), j);
            refcount = sum(~isnan(nonan_ref_second(:,j)));
            control_cell_median_second(i,j) = median(nonan_ref);
            
            if ~isnan(nonan_ref)                
                control_cell_var_second(i,j) = ( sum((nonan_ref-mean(nonan_ref)).^2)./ (refcount-1) );
            end
        end
    end
end


valid = (stim_trial_count >= NUMTRIALS) & (control_trial_count >= NUMTRIALS);

% Calculate the pooled std deviation
std_dev_sub_first = sqrt(stim_cell_var_first)-sqrt(control_cell_var_first);
std_dev_sub_second = sqrt(stim_cell_var_second)-sqrt(control_cell_var_second);
median_sub_first = stim_cell_median_first-control_cell_median_first;
median_sub_second = stim_cell_median_second-control_cell_median_second;
close(THEwaitbar);

%% Calculate PCA on the crtical area of the signals
[std_dev_coeff_first, score, latent, tquare, explained]=pca(std_dev_sub_first(:,66:100),'NumComponents',3);
[std_dev_coeff_second, score, latent, tquare, explained]=pca(std_dev_sub_second(:,66:100),'NumComponents',3);


[median_coeff_first, score, latent, tquare, explained]=pca(median_sub_first(:,66:100),'NumComponents',3);
[median_coeff_second, score, latent, tquare, explained]=pca(median_sub_second(:,66:100),'NumComponents',3);

timeBase = ((1:max_index-1)/16.6)';

%% Analyze the signals
% waitbar(i/size(std_dev_sub_first,1),THEwaitbar,'Analyzing subtracted signals...');
fitAmp_first = sum(std_dev_sub_first(:,66:100),2);
fitAmp_second = sum(std_dev_sub_second(:,66:100),2);
fitMedian_first = sum(median_sub_first(:,66:100),2);
fitMedian_second = sum(median_sub_second(:,66:100),2);

%%
save([ stim_intensity '.mat'],'fitAmp_first','fitAmp_second','fitMedian_first','fitMedian_second',...
                             'std_dev_coeff_first','std_dev_coeff_second','valid',...
                              'median_coeff_first','median_coeff_second',...
                              'control_cell_median_first','control_cell_median_second',...
                              'stim_cell_median_first','stim_cell_median_second',...
                              'control_cell_var_first','control_cell_var_second',...
                              'stim_cell_var_first','stim_cell_var_second',...
                              'allcoords','ref_image');

%% Plot the pos/neg ratio of the mean vs the amplitude
posnegratio=nan(size(control_coords,1),1);

mu = mean(std_dev_sub_first(:,66:100),2,'omitnan');
norm_nonan_ref = bsxfun(@minus,std_dev_sub_first(:,66:100),mu);
projected_ref = norm_nonan_ref*std_dev_coeff_first;
fitAmp_first = projected_ref(:,1);

mu = mean(std_dev_sub_second(:,66:100),2,'omitnan');
norm_nonan_ref = bsxfun(@minus,std_dev_sub_second(:,66:100),mu);
projected_ref = norm_nonan_ref*std_dev_coeff_second;
fitAmp_second = projected_ref(:,1);

mu = mean(median_sub_first(:,66:100),2,'omitnan');
norm_nonan_ref = bsxfun(@minus,median_sub_first(:,66:100),mu);
projected_ref = norm_nonan_ref*median_coeff_first;
fitMedian_first = projected_ref(:,1);

mu = mean(median_sub_second(:,66:100),2,'omitnan');
norm_nonan_ref = bsxfun(@minus,median_sub_second(:,66:100),mu);
projected_ref = norm_nonan_ref*median_coeff_second;
fitMedian_second = projected_ref(:,1);


figure(101); clf; hold on;
for i=1:size(control_coords,1)
    if ~isnan(fitAmp_first(i)) && ~isnan(fitAmp_second(i))

%         plot( fitAmp_first(i) +abs(fitMedian_first(i)), fitAmp_second(i)+abs(fitMedian_second(i)),'k.');
plot( fitAmp_first(i), fitAmp_second(i),'k.');
%         plot( fitMedian_first(i), fitMedian_second(i),'b.');
    end
end
plot([-2 14], [-2 14],'k')
axis([-2 14 -2 14]);
ylabel('First half response');
xlabel('Second half response');
title('First vs second half responses')
hold off;
saveas(gcf,['posneg_vs_amp_' num2str(stim_intensity) '.png']);
