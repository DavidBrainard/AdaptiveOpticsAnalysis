% function [fitCharacteristics]=Rel_FF_Single_Cone_Analyses(stimRootDir, controlRootDir)
% [fitCharacteristics]=Rel_FF_Single_Cone_Analyses(stimRootDir, controlRootDir)
%
%   Calculates pooled variance across a set of pre-analyzed 
%   signals from stimulus and control trials, performs the subtraction
%   between their standard deviations, and performs a piecewise fit of the 
%   resulting subtraction.
%
%   This script is designed to work with FULL FIELD datasets- that is, each
%   dataset (mat file) contains *only* control or stimulus data.
%
%   Normally, the user doesn't need to select a stimulus or control root
%   directory (that will be found automatically by
%   "FF_Aggregate_Multi_Trial_Run.m"), but if the software is run by
%   itself it will prompt the user for the folders containing the
%   pre-analyzed mat files generated by Rel_FF_Temporal_Reflectivity_Analysis.m.
%
% Inputs:
%       stimRootDir: The folder path of the pre-analyzed (.mat) stimulus
%       trials. Each mat file must contain valid stimulus signals.
%
%       controlRootDir: The folder path of the pre-analyzed (.mat) control
%       trials. Each mat file must contain valid control signals.
%
%
% Outputs:
%       fitCharacteristics: Information extracted from the mat files and
%       the fitted subtracted signal.
%
% Created by Robert F Cooper 2017-10-31
%

clear;
close all;

CUTOFF = 26;

if ~exist('stimRootDir','var')
    close all force;
    stimRootDir = uigetdir(pwd, 'Select the directory containing the stimulus profiles');
    controlRootDir = uigetdir(pwd, 'Select the directory containing the control profiles');
end

profileSDataNames = read_folder_contents(stimRootDir,'mat');
profileCDataNames = read_folder_contents(controlRootDir,'mat');


%% Code for determining variance across all signals at given timepoint

THEwaitbar = waitbar(0,'Loading stimulus profiles...');

max_index=0;

load(fullfile(stimRootDir, profileSDataNames{1}));
allcoords = ref_coords;

stim_cell_reflectance = cell(length(profileSDataNames),1);
stim_time_indexes = cell(length(profileSDataNames),1);
stim_cell_prestim_mean = cell(length(profileSDataNames),1);

for j=1:length(profileSDataNames)

    waitbar(j/length(profileSDataNames),THEwaitbar,'Loading stimulus profiles...');
    
    ref_coords=[];
    profileSDataNames{j}
    load(fullfile(stimRootDir,profileSDataNames{j}));
    
    stim_cell_reflectance{j} = norm_cell_reflectance;
    stim_time_indexes{j} = cell_times;
    stim_cell_prestim_mean{j} = cell_prestim_mean;
    
    thesecoords = union(allcoords, ref_coords,'rows');
    
    % These all must be the same length! (Same coordinate set)
    if size(ref_coords,1) ~= size(thesecoords,1)
        error('Coordinate lists different between mat files in this directory. Unable to perform analysis.')
    end
    
    for k=1:length(cell_times)
        max_index = max([max_index max(cell_times{k})]);
    end
    
end

%%
control_cell_reflectance = cell(length(profileCDataNames),1);
control_time_indexes = cell(length(profileCDataNames),1);
control_cell_prestim_mean = cell(length(profileCDataNames),1);

for j=1:length(profileCDataNames)

    waitbar(j/length(profileCDataNames),THEwaitbar,'Loading control profiles...');
    
    ref_coords=[];
    profileCDataNames{j}
    load(fullfile(controlRootDir,profileCDataNames{j}));
        
    control_cell_reflectance{j} = norm_cell_reflectance;
    control_time_indexes{j} = cell_times;
    control_cell_prestim_mean{j} = cell_prestim_mean;

    thesecoords = union(allcoords, ref_coords,'rows');
    
    % The length of the cell reflectance lists *must* be the same, because the
    % coordinate lists *must* be the same in each mat file.
    if size(ref_coords,1) ~= size(thesecoords,1)
        error('Coordinate lists different between mat files in this directory. Unable to perform analysis.')
    end
    
    for k=1:length(cell_times)
        max_index = max([max_index max(cell_times{k})]);
    end
    
end


%% Aggregation of all trials

percentparula = parula(101);

stim_cell_var = nan(size(allcoords,1), max_index);
stim_cell_mean = nan(size(allcoords,1), max_index);
stim_trial_count = zeros(size(allcoords,1),1);
stim_posnegratio = nan(size(allcoords,1),max_index);
% ratioplotnums=[];

for i=1:size(allcoords,1)
    waitbar(i/size(allcoords,1),THEwaitbar,'Processing stimulus signals...');
    
%     figure(1);
%     clf;
%     hold on;
    
    numtrials = 0;
    all_times_ref = nan(length(profileSDataNames), max_index);
    for j=1:length(profileSDataNames)
        
        if ~isempty(stim_cell_reflectance{j}{i}) && ...
           sum(stim_time_indexes{j}{i} >= 67 & stim_time_indexes{j}{i} <=99) >= CUTOFF
            
            % Find out what percentage of time the signal spends negative
            % or positive after stimulus delivery (66th frame)
            numposneg = sign(stim_cell_reflectance{j}{i}(stim_time_indexes{j}{i}>66));
            pos = sum(numposneg == 1);

%             subplot(2,1,1);hold on; plot(stim_time_indexes{j}{i}, (stim_cell_reflectance{j}{i}) );
%             xlabel('Frame #'); ylabel('Standardized reflectance'); title(num2str(i));

            stim_posnegratio(i,j) = round(100*pos/length(numposneg))+1;                        
%             if ~isnan(posnegatio) && ~isinf(posnegatio)
% %                 ratioplotnums = [ratioplotnums;stim_cell_prestim_mean{j}(i) posnegatio];
%                 subplot(2,1,2);hold on; plot(j, stim_cell_prestim_mean{j}(i),'.','Color',percentparula(posnegatio,:),'MarkerSize', 15 );
%                 axis([0 100 0 255]); xlabel('Trial #'); ylabel('Prestimulus reflectance (AU)');
%             end
        
            numtrials = numtrials+1;
            all_times_ref(j, stim_time_indexes{j}{i} ) = stim_cell_reflectance{j}{i};
        end
    end 
    stim_trial_count(i) = numtrials;
    

    for j=1:size(stim_cell_var,2)
        nonan_ref = all_times_ref(~isnan(all_times_ref(:,j)), j);
        refcount = sum(~isnan(all_times_ref(:,j)));
        refmean = mean(nonan_ref);
        if ~isnan(refmean)
            stim_cell_mean(i,j) = refmean;            
            stim_cell_var(i,j) = ( sum((nonan_ref-refmean).^2)./ (refcount-1) );
        end
    end
    
%     plot(stim_cell_mean(i,:));
%     figure(2); 
%     hold on;
%     clf;
%     plot(sqrt(stim_cell_var(i,:))); drawnow; hold off;

%     if i == 400
%         pause;
%     end
%     saveas(gcf,['NC_11043_stimulus_cone_' num2str(i) '_stddev_' num2str(numtrials) '_trials.png']);
end


%%
control_cell_var = nan(size(allcoords,1), max_index);
control_cell_mean = nan(size(allcoords,1), max_index);
control_trial_count = zeros(size(allcoords,1),1);
control_posnegratio = nan(size(allcoords,1),max_index);

for i=1:size(allcoords,1)
    waitbar(i/size(allcoords,1),THEwaitbar,'Processing control signals...');
%     figure(3);
%     clf;
%     hold on;
    
    numtrials = 0;
    all_times_ref = nan(length(profileCDataNames), max_index);
    for j=1:length(profileCDataNames)
                
        % Find out what percentage of time the signal spends negative
        % or positive after stimulus delivery (66th frame)
        numposneg = sign(control_cell_reflectance{j}{i}(control_time_indexes{j}{i}>66));
        pos = sum(numposneg == 1);

%         subplot(2,1,1);hold on; plot(control_time_indexes{j}{i}, (control_cell_reflectance{j}{i}) );
%         xlabel('Frame #'); ylabel('Standardized reflectance'); title(num2str(i));

        control_posnegratio(i,j) = round(100*pos/length(numposneg))+1;
%         if ~isnan(posnegatio) && ~isinf(posnegatio)
%             subplot(2,1,2);hold on; plot(j, control_cell_prestim_mean{j}(i),'.','Color',percentparula(posnegatio,:),'MarkerSize', 15 );
%             axis([0 100 0 255]); xlabel('Trial #'); ylabel('Prestimulus reflectance (AU)');
%         end
        
        if ~isempty(control_cell_reflectance{j}{i}) && ...
           sum(control_time_indexes{j}{i} >= 67 & control_time_indexes{j}{i} <=99) >=  CUTOFF
       
            numtrials = numtrials+1;
            all_times_ref(j, control_time_indexes{j}{i} ) = control_cell_reflectance{j}{i};
        end
    end
    control_trial_count(i) = numtrials;
%     drawnow;
%     saveas(gcf,['NC_11043_control_cone_' num2str(i) '_signals_' num2str(numtrials) '_trials.png']);

%     if i == 400
%             pause;
%     end
%     if numtrials > 75
%         drawnow;
%         frm = getframe(gcf);        
%         imwrite(frm.cdata, 'Signal_vs_prestim_ref_controls.tif','WriteMode','append');
%     end
    
    for j=1:size(control_cell_var,2)
        nonan_ref = all_times_ref(~isnan(all_times_ref(:,j)), j);
        refcount = sum(~isnan(all_times_ref(:,j)));
        refmean = mean(nonan_ref);
        if ~isnan(refmean)
            control_cell_mean(i,j) = refmean;
            control_cell_var(i,j) = ( sum((nonan_ref-refmean).^2)./ (refcount-1) );
        end
    end
%     figure(4);
%     hold on;
%     clf;
%     plot(control_cell_stddev(i,:)); drawnow;
%     saveas(gcf,['NC_11043_control_cone_' num2str(i) '_stddev_' num2str(numtrials) '_trials.png']);
end



%% Calculate the pooled std deviation
std_dev_sub = sqrt(stim_cell_var)-sqrt(control_cell_var);
mean_sub = stim_cell_mean-control_cell_mean;

timeBase = ((1:max_index)/16.6)';

fitAmp = nan(size(std_dev_sub,1),1);
fitMean = nan(size(std_dev_sub,1),1);
fitAngle = nan(size(std_dev_sub,1),1);

waitbar(1/size(std_dev_sub,1),THEwaitbar,'Fitting subtracted signals...');


parfor i=1:size(std_dev_sub,1)

    i
    thissig = std_dev_sub(i,:);
    if ~all( isnan(thissig) ) && (stim_trial_count(i) >= 25) && (control_trial_count(i) >= 25)
        fitData = modelFit_beta(timeBase, thissig');
        fitAmp(i) = fitData.amplitude;
%         pause(1);
        fitData = modelFit_beta(timeBase, mean_sub(i,:)' );
%         pause(1);
        fitMean(i) = fitData.amplitude;

        fitAngle(i) = atan2(fitMean(i),fitAmp(i));
%         if fitAmp(i) <=0
%             modelFit(timeBase, thissig',true)
%             fitAmp(i)
%             pause;
%         end
        
    end
end
close(THEwaitbar);

%% Plot the individual reflectance profiles
% figure(100); hold on;
% delete('cone_ref_examples.tif')
% for i=1:400%size(allcoords,1)
%     clf;
%     if ~isnan(fitAmp(i))
%    
%         subplot(4,1,1); plot(std_dev_sub(i,:),'-');
%         xlabel('Frame #'); ylabel('Reflectance Response'); title(num2str(i));
%         axis([0 180 -1 4]);
%         
%         subplot(4,1,2); plot(stim_cell_mean(i,:)-control_cell_mean(i,:));
%         xlabel('Frame #'); ylabel('Mean Reflectance Response');
%         axis([0 180 -3 3]);
%               
%         for j=1:length(profileSDataNames)
%             subplot(4,1,3); hold on; plot(stim_time_indexes{j}{i}, (stim_cell_reflectance{j}{i}),'-' );
%             xlabel('Frame #'); ylabel('Standardized reflectance'); %axis([0 165 -15 15]);
%                              
%             if ~isnan(stim_posnegratio(i,j)) && ~isinf(stim_posnegratio(i,j))
%                 subplot(4,1,4);hold on; plot(j, stim_cell_prestim_mean{j}(i),'.','Color',percentparula(stim_posnegratio(i,j),:),'MarkerSize', 15 );
%                 axis([0 length(profileSDataNames) 0 255]); xlabel('Trial #'); ylabel('Prestimulus reflectance (AU)');
%             end
%         end
%         f=getframe(gcf);
%         imwrite(f.cdata,'cone_ref_examples.tif','WriteMode','append');
%     end
% end

%% Plot the pos/neg ratio of the mean vs the amplitude
posnegratio=nan(size(allcoords,1),1);


figure(101); clf; hold on;
for i=1:size(allcoords,1)
    if ~isnan(fitAmp(i))
        % Find out what percentage of time the signal spends negative
        % or positive after stimulus delivery (66th frame)
%         numposneg = sign(mean_sub(i,:));
%         pos = sum(numposneg == 1);
% 
%         posnegratio(i) = 100*pos/length(numposneg);

        plot( fitAmp(i),fitMean(i),'k.');        
    end
end
ylabel('Mean response % positive');
xlabel('Reflectance response amplitude');
title('Percent positive vs reflectance response amplitude')
hold off;
saveas(gcf,'posneg_vs_amp.png');
%% Plot histograms of the amplitudes
% figure(5); 
% histogram( ( control_amps(~isnan(control_amps)) ),'Binwidth',0.1); hold on;
% histogram( ( stim_amps(~isnan(stim_amps)) ),'Binwidth',0.1);  hold off;
% title('Stimulus and control inter-trial stddev amplitudes');
% xlabel('Amplitude');
% ylabel('Number of cones');

figure(7);
histogram( fitAmp(~isnan(fitAmp)) ,'Binwidth',0.1);
title('Stim-Control per cone subtraction amplitudes');
xlabel('Amplitude difference from control');
ylabel('Number of cones');

%% Color code our image. 

upper_thresh = 4; 
lower_thresh = 0;

thismap = parula((upper_thresh*100)+1); 

figure(6); %imagesc(ref_image); hold on; colormap gray;
axis image; hold on;

percentmax = zeros(size(allcoords,1));

[V,C] = voronoin(allcoords,{'QJ'});

for i=1:size(allcoords,1)
    
    if ~isnan(fitAmp(i))
        percentmax(i) = fitAmp(i);
        
        if percentmax(i) > upper_thresh
            percentmax(i) = upper_thresh;
        elseif percentmax(i) < lower_thresh
            percentmax(i) = lower_thresh;
        end
        
        thiscolorind = round(percentmax(i)*100)+1;
        
        if ~isnan(thiscolorind) %&& percentmax(i) < 0.5
%             plot(allcoords(i,1),allcoords(i,2),'.','Color', thismap(thiscolorind,:), 'MarkerSize', 15 );
            patch(V(C{i},1),V(C{i},2),ones(size(V(C{i},1))),'FaceColor', thismap(thiscolorind,:));

        end
    end
end
colorbar
axis([min(allcoords(:,1)) max(allcoords(:,1)) min(allcoords(:,2)) max(allcoords(:,2))])
caxis([lower_thresh upper_thresh])
set(gca,'Color','k'); hold off; drawnow;


%% Output

% For structure:
% /stuff/id/date/wavelength/time/intensity/location/data/Profile_Data

[remain kid] = getparent(stimRootDir); % data
[remain stim_loc] = getparent(remain); % location 
[remain stim_intensity] = getparent(remain); % intensity 
[remain stim_time] = getparent(remain); % time
[remain stimwave] = getparent(remain); % wavelength
% [remain sessiondate] = getparent(remain); % date
[~, id] = getparent(remain); % id


save([ stim_intensity '.mat'],'fitAmp','fitMean','fitAngle',...
     'allcoords','ref_image','control_cell_mean',...
     'control_cell_var','stim_cell_mean','stim_cell_var');
