% function [fitCharacteristics]=Rel_FF_Single_Cone_Analyses(stimRootDir, controlRootDir)
% [fitCharacteristics]=Rel_FF_Single_Cone_Analyses(stimRootDir, controlRootDir)
%
%   Calculates pooled variance across a set of pre-analyzed 
%   signals from stimulus and control trials, performs the subtraction
%   between their standard deviations, and performs a piecewise fit of the 
%   resulting subtraction.
%
%   This script is designed to work with FULL FIELD datasets- that is, each
%   dataset (mat file) contains *only* control or stimulus data.
%
%   Normally, the user doesn't need to select a stimulus or control root
%   directory (that will be found automatically by
%   "FF_Aggregate_Multi_Trial_Run.m"), but if the software is run by
%   itself it will prompt the user for the folders containing the
%   pre-analyzed mat files generated by Rel_FF_Temporal_Reflectivity_Analysis.m.
%
% Inputs:
%       stimRootDir: The folder path of the pre-analyzed (.mat) stimulus
%       trials. Each mat file must contain valid stimulus signals.
%
%       controlRootDir: The folder path of the pre-analyzed (.mat) control
%       trials. Each mat file must contain valid control signals.
%
%
% Outputs:
%       fitCharacteristics: Information extracted from the mat files and
%       the fitted subtracted signal.
%
% Created by Robert F Cooper 2017-10-31
%

clear;
close all;

if ~exist('stimRootDir','var')
    close all force;
    stimRootDir = uigetdir(pwd, 'Select the directory containing the stimulus profiles');
    controlRootDir = uigetdir(pwd, 'Select the directory containing the control profiles');
end

profileSDataNames = read_folder_contents(stimRootDir,'mat');
profileCDataNames = read_folder_contents(controlRootDir,'mat');


%% Code for determining variance across all signals at given timepoint

THEwaitbar = waitbar(0,'Loading stimulus profiles...');

max_index=0;

load(fullfile(stimRootDir, profileSDataNames{1}));
allcoords = ref_coords;

stim_cell_reflectance = cell(length(profileSDataNames),1);
stim_time_indexes = cell(length(profileSDataNames),1);
stim_cell_prestim_mean = cell(length(profileSDataNames),1);

for j=1:length(profileSDataNames)

    waitbar(j/length(profileSDataNames),THEwaitbar,'Loading stimulus profiles...');
    
    ref_coords=[];
    profileSDataNames{j}
    load(fullfile(stimRootDir,profileSDataNames{j}));
    
    stim_cell_reflectance{j} = norm_cell_reflectance;
    stim_time_indexes{j} = cell_times;
    stim_cell_prestim_mean{j} = cell_prestim_mean;
    
    thesecoords = union(allcoords, ref_coords,'rows');
    
    % These all must be the same length! (Same coordinate set)
    if size(ref_coords,1) ~= size(thesecoords,1)
        error('Coordinate lists different between mat files in this directory. Unable to perform analysis.')
    end
    
    for k=1:length(cell_times)
        max_index = max([max_index max(cell_times{k})]);
    end
    
end

%%
control_cell_reflectance = cell(length(profileCDataNames),1);
control_time_indexes = cell(length(profileCDataNames),1);
control_cell_prestim_mean = cell(length(profileCDataNames),1);

for j=1:length(profileCDataNames)

    waitbar(j/length(profileCDataNames),THEwaitbar,'Loading control profiles...');
    
    ref_coords=[];
    profileCDataNames{j}
    load(fullfile(controlRootDir,profileCDataNames{j}));
        
    control_cell_reflectance{j} = norm_cell_reflectance;
    control_time_indexes{j} = cell_times;
    control_cell_prestim_mean{j} = cell_prestim_mean;

    thesecoords = union(allcoords, ref_coords,'rows');
    
    % The length of the cell reflectance lists *must* be the same, because the
    % coordinate lists *must* be the same in each mat file.
    if size(ref_coords,1) ~= size(thesecoords,1)
        error('Coordinate lists different between mat files in this directory. Unable to perform analysis.')
    end
    
    for k=1:length(cell_times)
        max_index = max([max_index max(cell_times{k})]);
    end
    
end


%% Aggregation of all trials

percentparula = parula(101);

stim_cell_var = nan(size(allcoords,1), max_index);
stim_trial_count = zeros(size(allcoords,1),1);

for i=1:size(allcoords,1)
    waitbar(i/size(allcoords,1),THEwaitbar,'Processing stimulus signals...');
    
%     figure(1);
%     clf;
%     hold on;
    
    numtrials = 0;
    all_times_ref = nan(length(profileSDataNames), max_index);
    for j=1:length(profileSDataNames)
        
        if ~isempty(stim_cell_reflectance{j}{i})
            
            % Find out what percentage of time the signal spends negative
            % or positive after stimulus delivery (66th frame)
            numposneg = sign(stim_cell_reflectance{j}{i}(stim_time_indexes{j}{i}>66));
            pos = sum(numposneg == 1);

            subplot(2,1,1);hold on; plot(stim_time_indexes{j}{i}, (stim_cell_reflectance{j}{i}) );
            xlabel('Frame #'); ylabel('Standardized reflectance'); title(num2str(i));

            posnegatio = round(100*pos/length(numposneg))+1;
            if ~isnan(posnegatio) && ~isinf(posnegatio)
                subplot(2,1,2);hold on; plot(j, stim_cell_prestim_mean{j}(i),'.','Color',percentparula(posnegatio,:),'MarkerSize', 15 );
                axis([0 100 0 255]); xlabel('Trial #'); ylabel('Prestimulus reflectance (AU)');
            end
        
            numtrials = numtrials+1;
            all_times_ref(j, stim_time_indexes{j}{i} ) = stim_cell_reflectance{j}{i};
        end
    end    
    stim_trial_count(i) = numtrials;
    
%     if i == 400
%         pause;
%     end
%     if numtrials > 75
%         drawnow;
%         frm = getframe(gcf);        
%         imwrite(frm.cdata, 'Signal_vs_prestim_ref.tif','WriteMode','append');
%     end

    
    for j=1:size(stim_cell_var,2)
        nonan_ref = all_times_ref(~isnan(all_times_ref(:,j)), j);
        refcount = sum(~isnan(all_times_ref(:,j)));
        refmean = mean(nonan_ref);
        if ~isnan(refmean)
            stim_cell_var(i,j) = ( sum((nonan_ref-refmean).^2)./ (refcount-1) );
        end
    end
    
%     figure(2); 
%     hold on;
%     clf;
%     plot(stim_cell_stddev(i,:)); drawnow;
%     saveas(gcf,['NC_11043_stimulus_cone_' num2str(i) '_stddev_' num2str(numtrials) '_trials.png']);
end



%%
control_cell_var = nan(size(allcoords,1), max_index);
control_trial_count = zeros(size(allcoords,1),1);

for i=1:size(allcoords,1)
    waitbar(i/size(allcoords,1),THEwaitbar,'Processing control signals...');
%     figure(3);
%     clf;
%     hold on;
    
    numtrials = 0;
    all_times_ref = nan(length(profileCDataNames), max_index);
    for j=1:length(profileCDataNames)
                
        subplot(2,1,1);hold on; plot(control_time_indexes{j}{i}, control_cell_reflectance{j}{i} ); 
        
        subplot(2,1,2);hold on; plot(j, control_cell_prestim_mean{j}(i),'.','MarkerSize', 15 ); axis([0 100 0 255]);
        
        
        if ~isempty(control_cell_reflectance{j}{i})
            numtrials = numtrials+1;
            all_times_ref(j, control_time_indexes{j}{i} ) = control_cell_reflectance{j}{i};
        end
    end
    control_trial_count(i) = numtrials;
%     drawnow;
%     saveas(gcf,['NC_11043_control_cone_' num2str(i) '_signals_' num2str(numtrials) '_trials.png']);
    
    for j=1:size(control_cell_var,2)
        nonan_ref = all_times_ref(~isnan(all_times_ref(:,j)), j);
        refcount = sum(~isnan(all_times_ref(:,j)));
        refmean = mean(nonan_ref);
        if ~isnan(refmean)
            control_cell_var(i,j) = ( sum((nonan_ref-refmean).^2)./ (refcount-1) );
        end
    end
%     figure(4);
%     hold on;
%     clf;
%     plot(control_cell_stddev(i,:)); drawnow;
%     saveas(gcf,['NC_11043_control_cone_' num2str(i) '_stddev_' num2str(numtrials) '_trials.png']);
end

%% Calculate the pooled std deviation
std_dev_sub = sqrt(stim_cell_var-control_cell_var);
std_dev_sub(imag(std_dev_sub)>0) = std_dev_sub(imag(std_dev_sub)>0)*sqrt(-1);

timeBase = ((1:max_index)/17.6)';

fitAmp = zeros(size(std_dev_sub,1),1);

for i=1:size(std_dev_sub,1)
    waitbar(i/size(std_dev_sub,1),THEwaitbar,'Fitting subtracted signals...');
    
    thissig = std_dev_sub(i,:);
    if ~all( isnan(thissig) ) && (stim_trial_count(i) > 50) && (control_trial_count(i) > 50)
        fitData = modelFit(timeBase, thissig');
        fitAmp(i) = fitData.amplitude;
        
    end
end


close(THEwaitbar);

%% Plot histograms of the amplitudes
% figure(5); 
% histogram( ( control_amps(~isnan(control_amps)) ),'Binwidth',0.1); hold on;
% histogram( ( stim_amps(~isnan(stim_amps)) ),'Binwidth',0.1);  hold off;
% title('Stimulus and control inter-trial stddev amplitudes');
% xlabel('Amplitude');
% ylabel('Number of cones');

figure(7);
histogram( fitAmp(fitAmp~=0) ,'Binwidth',0.1);
title('Stim-Control per cone subtraction amplitudes');
xlabel('Amplitude difference from control');
ylabel('Number of cones');

%% Color code our image. 

upper_thresh = 4; 
lower_thresh = 0;

thismap = parula((upper_thresh*100)+1); 

figure(6); %imagesc(ref_image); hold on; colormap gray;
axis image; hold on;

percentmax = zeros(size(allcoords,1));

[V,C] = voronoin(allcoords,{'QJ'});

for i=1:size(allcoords,1)
    
%     if stim_amps(i) ~= 0
        percentmax(i) = fitAmp(i);
        
        if percentmax(i) > upper_thresh
            percentmax(i) = upper_thresh;
        elseif percentmax(i) < lower_thresh
            percentmax(i) = lower_thresh;
        end
        
        thiscolorind = round(percentmax(i)*100)+1;
        
        if ~isnan(thiscolorind) %&& percentmax(i) < 0.5
%             plot(allcoords(i,1),allcoords(i,2),'.','Color', thismap(thiscolorind,:), 'MarkerSize', 15 );
            patch(V(C{i},1),V(C{i},2),ones(size(V(C{i},1))),'FaceColor', thismap(thiscolorind,:));

        end
%     end
end
colorbar
axis([min(allcoords(:,1)) max(allcoords(:,1)) min(allcoords(:,2)) max(allcoords(:,2))])
caxis([lower_thresh upper_thresh])
set(gca,'Color','k'); hold off; drawnow;

numtrials;
%% Output

% For structure: /stuff/id/date/wavelength/time/intensity/location/data
[remain kid] = getparent(stimRootDir);

% [remain region] = getparent(remain);
[remain stim_loc] = getparent(remain);
[remain stim_intensity] = getparent(remain);
[remain stim_time] = getparent(remain);
[remain stimwave] = getparent(remain);
[remain sessiondate] = getparent(remain);
[~, id] = getparent(remain);

outFname = [id '_' stimwave '_' stim_intensity '_' stim_time '_single_' num2str(size(allcoords,1)) '_signals_twosource'];

figure(8);  title('All control signals'); xlabel('Frame #'); ylabel('Standard deviations'); %axis([0 249 -20 75]);
saveas(gcf, fullfile(pwd, [outFname '_allcontrol.png']), 'png' );
figure(9);  title('All stimulus signals'); xlabel('Frame #'); ylabel('Standard deviations'); %axis([0 249 -20 75]);
saveas(gcf, fullfile(pwd, [outFname '_allstim.png']), 'png' );

hz=16.66666666;
timeBase = ((1:allmax)/hz)';

dlmwrite(fullfile(pwd, [outFname '.csv']), [timeBase sqrt(pooled_variance_stim) sqrt(pooled_variance_control)], ',' );


figure(10); 
plot( timeBase,sqrt(pooled_variance_stim)-1,'r'); hold on;
plot( timeBase,sqrt(pooled_variance_control)-1,'b');


pooled_std_stim    = sqrt(pooled_variance_stim)-sqrt(pooled_variance_control);
plot( timeBase(~isnan(pooled_std_stim)), pooled_std_stim(~isnan(pooled_std_stim)),'k'); hold on;
legend('Stimulus cones','Control cones','Subtraction');


% Stim train
stimlen = str2double( strrep(stim_time(1:3),'p','.') );

trainlocs = 66/hz:1/hz:(66/hz+stimlen);
plot(trainlocs, max(pooled_std_stim)*ones(size(trainlocs)),'r*'); hold off;

% plot(stim_locs, max([ref_variance_stim; ref_variance_control])*ones(size(stim_locs)),'r*'); hold off;
ylabel('Pooled Standard deviation'); xlabel('Time (s)'); title( [stim_intensity ' ' stim_time 'pooled standard deviation of ' num2str(length(profileSDataNames)) ' signals.'] );
axis([0 16 -1 3])
hold off;
saveas(gcf, fullfile(pwd, [outFname '.png']), 'png' );
% saveas(gcf, fullfile(pwd, [outFname '.svg']), 'svg' );

% save( fullfile(pwd,['pooled_var_aggregate_' num2str(length(profileDataNames)) '_signals.mat' ] ), 'pooled_std_stim', 'timeBase' );

% dlmwrite(fullfile(pwd, [date '_all_plots.csv']), [ [str2double(id(4:end)), str2double(stim_intensity(1:3)), stimlen] ;[ timeBase sqrt(pooled_variance_stim) sqrt(pooled_variance_control) ] ]',...
%          '-append', 'delimiter', ',', 'roffset',1);


[fitCharacteristics, residuals] = modelFit(timeBase, pooled_std_stim);
figure(2); hold on;
plot(trainlocs, (.2+max(pooled_std_stim))*ones(size(trainlocs)),'y*'); hold off;

saveas(gcf, fullfile(pwd, [outFname '_wfit.png']) );
% saveas(gcf, fullfile(pwd, [outFname '_wfit.fig']) );
% saveas(gcf, fullfile(pwd, [outFname '_wfit.svg']), 'svg' );
% figure(1);
% saveas(gcf, fullfile(pwd, [outFname '_meanratio.svg']), 'svg' );
% close(8);

fitCharacteristics.min_cones = min_cones;
fitCharacteristics.max_cones = max_cones;
fitCharacteristics.avg_num_cones = num_control_cones/length(profileSDataNames);
fitCharacteristics.num_pooled = length(profileSDataNames);
fitCharacteristics.subject = id;
fitCharacteristics.stim_intensity = stim_intensity;
fitCharacteristics.stim_length = stimlen;
fitCharacteristics.stim_wavelength = stimwave;
fitCharacteristics.stim_loc = stim_loc;
fitCharacteristics

