% function [fitCharacteristics]=Rel_FF_Single_Cone_Analyses(stimRootDir, controlRootDir)
% [fitCharacteristics]=Rel_FF_Single_Cone_Analyses(stimRootDir, controlRootDir)
%
%   Calculates pooled variance across a set of pre-analyzed 
%   signals from a single cone's stimulus and control trials, performs 
%   the subtraction between its standard deviations, and performs a
%   piecewise fit of the subtraction.
%
%   This script is designed to work with FULL FIELD datasets- that is, each
%   dataset (mat file) contains *only* control or stimulus data.
%
%   Normally, the user doesn't need to select a stimulus or control root
%   directory (that will be found automatically by
%   "FF_Aggregate_Multi_Trial_Run.m"), but if the software is run by
%   itself it will prompt the user for the folders containing the
%   pre-analyzed mat files generated by Rel_FF_Temporal_Reflectivity_Analysis.m.
%
% Inputs:
%       stimRootDir: The folder path of the pre-analyzed (.mat) stimulus
%       trials. Each mat file must contain valid stimulus signals.
%
%       controlRootDir: The folder path of the pre-analyzed (.mat) control
%       trials. Each mat file must contain valid control signals.
%
%
% Outputs:
%       fitCharacteristics: Information extracted from the mat files and
%       the fitted subtracted signal.
%
% Created by Robert F Cooper 2017-10-31
%

clear;
close all;

CUTOFF = 26;
RERUNS = 500;

if ~exist('stimRootDir','var')
    close all force;
    stimRootDir = uigetdir(pwd, 'Select the directory containing the stimulus profiles');
    controlRootDir = uigetdir(pwd, 'Select the directory containing the control profiles');
end

profileSDataNames = read_folder_contents(stimRootDir,'mat');
profileCDataNames = read_folder_contents(controlRootDir,'mat');


% For structure:
% /stuff/id/date/wavelength/time/intensity/location/data/Profile_Data

[remain kid] = getparent(stimRootDir); % data
[remain stim_loc] = getparent(remain); % location 
[remain stim_intensity] = getparent(remain); % intensity 
[remain stim_time] = getparent(remain); % time
[remain stimwave] = getparent(remain); % wavelength
% [remain sessiondate] = getparent(remain); % date
[~, id] = getparent(remain); % id


%% Code for determining variance across all signals at given timepoint

THEwaitbar = waitbar(0,'Loading stimulus profiles...');

max_index=0;

load(fullfile(stimRootDir, profileSDataNames{1}));
stim_coords = ref_coords;

stim_cell_reflectance = cell(length(profileSDataNames),1);
stim_time_indexes = cell(length(profileSDataNames),1);
stim_cell_prestim_mean = cell(length(profileSDataNames),1);

for j=1:length(profileSDataNames)

    waitbar(j/length(profileSDataNames),THEwaitbar,'Loading stimulus profiles...');
    
    ref_coords=[];
    profileSDataNames{j}
    load(fullfile(stimRootDir,profileSDataNames{j}));
    
    stim_cell_reflectance{j} = norm_cell_reflectance;
    stim_time_indexes{j} = cell_times;
    stim_cell_prestim_mean{j} = cell_prestim_mean;
    
    thesecoords = union(stim_coords, ref_coords,'rows');
    
    % These all must be the same length! (Same coordinate set)
    if size(ref_coords,1) ~= size(thesecoords,1)
        error('Coordinate lists different between mat files in this directory. Unable to perform analysis.')
    end
    
    for k=1:length(cell_times)
        max_index = max([max_index max(cell_times{k})]);
    end
    
end

%%
control_cell_reflectance = cell(length(profileCDataNames),1);
control_time_indexes = cell(length(profileCDataNames),1);
control_cell_prestim_mean = cell(length(profileCDataNames),1);

load(fullfile(controlRootDir, profileCDataNames{1}));
control_coords = ref_coords;

for j=1:length(profileCDataNames)

    waitbar(j/length(profileCDataNames),THEwaitbar,'Loading control profiles...');
    
    ref_coords=[];
    profileCDataNames{j}
    load(fullfile(controlRootDir,profileCDataNames{j}));
        
    control_cell_reflectance{j} = norm_cell_reflectance;
    control_time_indexes{j} = cell_times;
    control_cell_prestim_mean{j} = cell_prestim_mean;

    thesecoords = union(control_coords, ref_coords,'rows');
    
    % The length of the cell reflectance lists *must* be the same, because the
    % coordinate lists *must* be the same in each mat file.
    if size(ref_coords,1) ~= size(thesecoords,1)
        error('Coordinate lists different between mat files in this directory. Unable to perform analysis.')
    end
    
    for k=1:length(cell_times)
        max_index = max([max_index max(cell_times{k})]);
    end
    
end

%% The coordinate lists must the same length,
% otherwise it's not likely they're from the same set.

if size(stim_coords,1) ~= size(control_coords,1)
    error('Coordinate lists different between control and stimulus directories. Unable to perform analysis.')
end

allcoords = stim_coords;


%% Aggregation of all trials

rng('shuffle');

percentparula = parula(101);

stim_cell_var = single(nan(size(stim_coords,1), max_index, RERUNS));
stim_cell_median = single(nan(size(stim_coords,1), max_index, RERUNS));
stim_trial_count = (zeros(size(stim_coords,1),1, RERUNS,'uint8'));

% stim_prestim_means=[];

parfor i=1:size(stim_coords,1)
%     waitbar(i/size(stim_coords,1),THEwaitbar,'Processing stimulus signals...');
%     tic;
    for k=1:RERUNS
        
        numtrials = 0;
        all_times_ref = nan(length(profileSDataNames), max_index);
        fileIndices = randi(length(profileSDataNames),1,length(profileSDataNames));

        for j=1:length(profileSDataNames)

            if ~isempty(stim_cell_reflectance{fileIndices(j)}{i}) && ...
                sum(stim_time_indexes{fileIndices(j)}{i} >= 67 & stim_time_indexes{fileIndices(j)}{i} <=99) >= CUTOFF

%                 stim_prestim_means = [stim_prestim_means; stim_cell_prestim_mean{fileIndices(j)}(i)];

                numtrials = numtrials+1;
                all_times_ref(j, stim_time_indexes{fileIndices(j)}{i} ) = stim_cell_reflectance{fileIndices(j)}{i};
            end
        end 
        stim_trial_count(i,k) = numtrials;


        for t=1:max_index
            nonan_ref = all_times_ref(~isnan(all_times_ref(:,t)), t);
            refcount = sum(~isnan(all_times_ref(:,t)));
            refmedian = median(nonan_ref);
            if ~isnan(refmedian)
                stim_cell_median(i,t,k) = refmedian;            
                stim_cell_var(i,t,k) = ( sum((nonan_ref-refmedian).^2)./ (refcount-1) );
            end
        end
    
    end
%     toc;
end


%%
control_cell_var = single(nan(size(control_coords,1), max_index, RERUNS));
control_cell_median = single(nan(size(control_coords,1), max_index, RERUNS));
control_trial_count = (zeros(size(control_coords,1),1, RERUNS,'uint8'));

% cont_prestim_means=[];

parfor i=1:size(control_coords,1)
%     waitbar(i/size(control_coords,1),THEwaitbar,'Processing control signals...');
%     tic;
    for k=1:RERUNS
        numtrials = 0;
        all_times_ref = nan(length(profileCDataNames), max_index);
        fileIndices = randi(length(profileCDataNames),1,length(profileCDataNames));
    
        for j=1:length(profileCDataNames)

            if ~isempty(control_cell_reflectance{fileIndices(j)}{i}) && ...
               sum(control_time_indexes{fileIndices(j)}{i} >= 67 & control_time_indexes{fileIndices(j)}{i} <=99) >=  CUTOFF

    %             cont_prestim_means = [cont_prestim_means; control_cell_prestim_mean{j}(i)];

                numtrials = numtrials+1;
                all_times_ref(j, control_time_indexes{fileIndices(j)}{i} ) = control_cell_reflectance{fileIndices(j)}{i};
            end
        end
        control_trial_count(i,k) = numtrials;

        for t=1:max_index
            nonan_ref = all_times_ref(~isnan(all_times_ref(:,t)), t);
            refcount = sum(~isnan(all_times_ref(:,t)));
            refmedian = median(nonan_ref);
            if ~isnan(refmedian)
                control_cell_median(i,t,k) = refmedian;
                control_cell_var(i,t,k) = ( sum((nonan_ref-refmedian).^2)./ (refcount-1) );
            end
        end
    end
%     toc;
end

% save bootstraphalfway.mat

%% Calculate the pooled std deviation
std_dev_sub = nan(size(allcoords,1), max_index, RERUNS);
median_sub = nan(size(allcoords,1), max_index, RERUNS);

fitAmp = nan(size(allcoords,1), 1);
fitAmpStd = nan(size(allcoords,1), 1);
fitMedian = nan(size(allcoords,1), 1);
fitMedianStd = nan(size(allcoords,1), 1);
k=1;
for i=1:size(allcoords,1)

    sub_indicies = randi(RERUNS, RERUNS, 2);    
        
    for k=1:RERUNS
        std_dev_sub(i,:,k) = sqrt(stim_cell_var(i,:, sub_indicies(k,1))) - sqrt(control_cell_var(i,:, sub_indicies(k,2)));
        median_sub(i,:,k) = stim_cell_median(i,:, sub_indicies(k,1)) - control_cell_median(i,:, sub_indicies(k,2));
    end
    
    mean_std_dev_sub = mean(squeeze(std_dev_sub(i,:,:)),2,'omitnan');
    std_std_dev_sub = std(squeeze(std_dev_sub(i,:,:)),0,2,'omitnan');
    
    mean_median_sub = mean(squeeze(median_sub(i,:,:)),2,'omitnan');
    std_median_sub = std(squeeze(median_sub(i,:,:)),0,2,'omitnan');
    
    if ~all( isnan(stim_cell_var(i,:, sub_indicies(k,1))) ) && ~all( isnan(control_cell_var(i,:, sub_indicies(k,2))) )  && ...
           (stim_trial_count(i,sub_indicies(k,1)) >= 20) && (control_trial_count(i,sub_indicies(k,2)) >= 20)
        
        fitAmp(i) = sum(mean_std_dev_sub(66:100));% - sum(mean_std_dev_sub(31:65));
        fitAmpStd(i) = sum(std_std_dev_sub(66:100));% - sum(std_std_dev_sub(31:65));
        fitMedian(i) = sum(mean_median_sub(66:100));% - sum(mean_median_sub(31:65));
        fitMedianStd(i) = sum(std_median_sub(66:100));% - sum(std_median_sub(31:65));

%         figure(1); clf; hold on;
%         area(mean_std_dev_sub+2*std_std_dev_sub,-4,'FaceColor',[.85 .85 .85],'EdgeColor',[.85 .85 .85]);
%         area(mean_std_dev_sub,-4,'FaceColor',[.85 .85 .85]);
%         area(mean_std_dev_sub-2*std_std_dev_sub,-4,'FaceColor',[1 1 1], 'EdgeColor',[1 1 1]);
% 
%         figure(2); clf; hold on;
%         area(mean_median_sub+2*std_median_sub,-4,'FaceColor',[.85 .85 .85],'EdgeColor',[.85 .85 .85]);
%         area(mean_median_sub,-4,'FaceColor',[.85 .85 .85]);
%         area(mean_median_sub-2*std_median_sub,-4,'FaceColor',[1 1 1], 'EdgeColor',[1 1 1]);
        
        
%         pause;
    end
    
end
%% Output


save([ stim_intensity '.mat'],'fitAmp','fitAmpStd','fitMedian','fitMedianStd',...
     'allcoords','ref_image');


%% Plot the pos/neg ratio of the mean vs the amplitude
posnegratio=nan(size(control_coords,1),1);


figure(101); clf; hold on;
for i=1:size(control_coords,1)
    if ~isnan(fitAmp(i))
        % Find out what percentage of time the signal spends negative
        % or positive after stimulus delivery (66th frame)
%         numposneg = sign(mean_sub(i,:));
%         pos = sum(numposneg == 1);
% 
%         posnegratio(i) = 100*pos/length(numposneg);

        plot( fitAmp(i),fitMedian(i),'k.');        
    end
end
ylabel('Median response amplitude');
xlabel('Reflectance response amplitude');
title('Median reflectance vs reflectance response amplitude')
hold off;
saveas(gcf,['posneg_vs_amp_' num2str(stim_intensity) '.png']);
%% Plot histograms of the amplitudes
% figure(5); 
% histogram( ( control_amps(~isnan(control_amps)) ),'Binwidth',0.1); hold on;
% histogram( ( stim_amps(~isnan(stim_amps)) ),'Binwidth',0.1);  hold off;
% title('Stimulus and control inter-trial stddev amplitudes');
% xlabel('Amplitude');
% ylabel('Number of cones');

figure(7);
histogram( fitAmp(~isnan(fitAmp)) ,'Binwidth',0.1);
title('Stim-Control per cone subtraction amplitudes');
xlabel('Amplitude difference from control');
ylabel('Number of cones');


